// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_desktop/data/Option_entity.dart';
import 'package:flutter_desktop/generated/json/Option_entity_helper.dart';
import 'package:flutter_desktop/data/Question_entity.dart';
import 'package:flutter_desktop/generated/json/Question_entity_helper.dart';
import 'package:flutter_desktop/data/Current_question_entity.dart';
import 'package:flutter_desktop/generated/json/Current_question_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case OptionEntity:
				return optionEntityFromJson(data as OptionEntity, json) as T;
			case QuestionEntity:
				return questionEntityFromJson(data as QuestionEntity, json) as T;
			case CurrentQuestionEntity:
				return currentQuestionEntityFromJson(data as CurrentQuestionEntity, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case OptionEntity:
				return optionEntityToJson(data as OptionEntity);
			case QuestionEntity:
				return questionEntityToJson(data as QuestionEntity);
			case CurrentQuestionEntity:
				return currentQuestionEntityToJson(data as CurrentQuestionEntity);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (OptionEntity).toString()){
			return OptionEntity().fromJson(json);
		}	else if(type == (QuestionEntity).toString()){
			return QuestionEntity().fromJson(json);
		}	else if(type == (CurrentQuestionEntity).toString()){
			return CurrentQuestionEntity().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<OptionEntity>[] is M){
			return data.map<OptionEntity>((e) => OptionEntity().fromJson(e)).toList() as M;
		}	else if(<QuestionEntity>[] is M){
			return data.map<QuestionEntity>((e) => QuestionEntity().fromJson(e)).toList() as M;
		}	else if(<CurrentQuestionEntity>[] is M){
			return data.map<CurrentQuestionEntity>((e) => CurrentQuestionEntity().fromJson(e)).toList() as M;
		}
		throw Exception("not fond");
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}